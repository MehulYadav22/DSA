In this code I am doing 5 operations:
1. Creating a Doubly Linked List
2. Inserting node at the head of the Doubly Linked List
3. Inserting node at the tail of the Doubly Linked List
4. Inserting node at any position in the Doubly Linked List
5. Deleting any particular node in the Doubly Linked List
6. Finding the length of the Linked List
7. Printing the desired linked list 
//----------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* prev;
    Node* next;
    
    //Constructor
    Node(int data)
    {
        this->data=data;
        this->prev=NULL;
        this->next=NULL;        
    }
    ~Node()
    {
        int value=this->data;
        if(this->next!=NULL)
        {
            delete next;
            next=NULL;
        }
        cout<<" memory is free for the node with data "<<value<<endl;

    }
};
int getLength(Node* &head)
{
    int len=0;
    Node* start=head;
    while(start!=NULL)
    {
        len++;
        start=start->next;
    }
    return len;

}
void insertAtHead(Node* &head,Node* &tail,int data)
{
    //empty list
    if(head==NULL)
    {
        Node* temp=new Node(data);
        head=temp;
        tail=temp;
    }
    else
    {
    Node* temp=new Node(data);
    temp->next=head;
    head->prev=temp;
    head=temp;

    }

}
void insertAtTail(Node* &tail,Node* &head,int data)
{
    //empty list
    if(tail==NULL)
    {
        Node* temp=new Node(data);
        tail=temp;
        head=temp;
    }
    else
    {
    Node*  temp=new Node(data);
    tail->next=temp;
    temp->prev=tail;
    tail=temp;
    }
}
void insertAtPosition(Node* &head,Node* &tail,int position,int data)
{
    if(position==1)
    {
        insertAtHead(head,tail,data);
        return;
    }
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1)
    {
        temp=temp->next;
        cnt++;
    }
    //inserting at last poisiton
    {
        if(temp->next==NULL)
        {
            insertAtTail(tail,head,data);
            return;
        }
    }

    //creating a node
    Node* nodeToInsert=new Node(data);
    nodeToInsert->next=temp->next;
    temp->next->prev=nodeToInsert;
    temp->next=nodeToInsert;
    nodeToInsert->prev=temp;
}
void deleteNode(Node* &head,int position)
{
    //deleting first or start node
    if(position==1)
    {
        Node* temp=head;
        temp->next->prev=NULL;
        head=temp->next;
        temp->next=NULL;
        //delete from memory
        delete temp;

    }
    else
    {
        //deleting any middle node or last node
        Node* current=head;
        Node* previous=NULL;
        int cnt=1;
        while(cnt<position)
        {
            previous=current;
            current=current->next;
            cnt++;
        }
        current->prev=NULL;
        previous->next=current->next;
        current->next=NULL;
        //delete from memory
        delete current;     

    }
}
void print(Node* &head)
{
    Node* start=head;
    while(start!=NULL)
    {
        cout<<start->data<<" ";
        start=start->next;
    }
    cout<<endl;
}
int main()
{
    //Node* node1=new Node(10);
    Node* head=NULL;
    Node* tail=NULL;
    print(head);
    
    //cout<<"length of list "<<getLength(head)<<endl;
    insertAtHead(head,tail,20);
    print(head);
    insertAtHead(head,tail,30);
    print(head);
    insertAtHead(head,tail,40);
    print(head);
    
    insertAtTail(tail,head,50);  
    print(head);

    insertAtPosition(head,tail,3,60);
    print(head);
    deleteNode(head,3);
    print(head);

    cout<<"head "<<head->data<<endl;
    cout<<"tail "<<tail->data<<endl;

}
