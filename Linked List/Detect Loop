//---------------------------------------------------------------------------------------------------
//In it we have used map to find whether a loop is present in the linked list or not
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;

    //constructor
    Node(int data)
    {
        this->data=data;
        this->next=NULL;
    }
    //destructor
    ~Node()
    {
        int value=this->data;
        if(this->next!=NULL)
        {
            delete next;
            next=NULL;
        }
        cout<<" memory is free for the node with data "<<value<<endl;

    }

};
void insertNode(Node* &tail, int element,int data)
{
    //assuming the element is present in the list
    //empty list
    if(tail==NULL)
    {
        Node* newNode=new Node(data);
        tail=newNode;
        newNode->next=newNode;
    }
    else
    {//non-empty list
      Node* current=tail;
      while(current->data!=element)
      {
        current=current->next;
      }
      //element found -> current is representing element wala node
      Node* temp=new Node(data);
      temp->next=current->next;
      current->next=temp;
    }
}
bool isCircularList(Node* &head)
{
    if(head==NULL)
    {
        return true;
    }
    Node* temp=head->next;
    while(temp!=NULL && temp!=head)
    {
        temp=temp->next;
    }
    if(temp==head)
    {
        return true;
    }
    return false;
}
//complexity
//T.C=o(n)
//S.C=o(n)
bool detectLoop(Node* &head)
{
    if(head==NULL)
    {
        return false;
    }
    map<Node*,bool> visited;
    Node* temp=head;
    while(temp!=NULL)
    {
        if(visited[temp]==true)
        {
            //cycle is present
            cout<<"Present on element "<<temp->data<<endl;
            return true;
        }
          visited[temp]=true;
          temp=temp->next;
    }
    return false;
}
void print(Node* &tail)
{
    Node* temp=tail;
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}
int main()
{
    Node* tail=NULL;

    insertNode(tail,5,3);
    //print(tail);
    insertNode(tail,3,5);
    //print(tail);
    insertNode(tail,5,7);
    //print(tail);
    insertNode(tail,7,9);
    //print(tail);
    insertNode(tail,5,6);
    //print(tail);
    insertNode(tail,3,4);
    // print(tail);
    if(isCircularList(tail))
    {
        cout<<"circular"<<endl;
    }
    else
    {
        cout<<"not circular"<<endl;
    }
    
}
