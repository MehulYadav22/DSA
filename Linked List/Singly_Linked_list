// In this code I have done 5 operations
// 1. Initializing the linked list.
// 2. Inserting node at the head of the linked list
// 3. Inserting node at the tail of the linked list
// 4. Deleting any particular node in the linked list
// 5. Printing the desired linked list in the terminal
//-------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* next;

    //constructor
    Node(int data)
    {
        this ->data = data;
        this ->next = NULL;
    }
    //destructor
    ~Node()
    {
        int value=this->data;
        //memory free
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
        cout<<" memory is free for the node with data "<<value<<endl;
    }
};
//Inserting Node at the head of the linked list
void insertAtHead(Node* &head,Node* &tail, int d)
{
    //empty list
    if(head==NULL)
    {
        Node* temp=new Node(d);
        head=temp;
        tail=temp;
    }
    else
    {
        // Create new node
    Node* temp= new Node(d);
    temp-> next=head;
    head=temp;

    }
    
}
//Innserting node at the tail of the linked list
void insertAtTail(Node* &tail,Node* &head, int d)
{
    if(tail==NULL)
    {
        Node* temp=new Node(d);
        head=temp;
        tail=temp;
    }
    else
    {
        //create new node
    Node* temp= new Node(d);
    tail ->next=temp;
    tail= temp;
    }
}
//Inserting node at any random position in thhe linkedd list
void insertAtPosition(Node* &tail,Node* &head, int position, int d)
{
    if(position==1)
    {
        insertAtHead(head,tail,d);
        return;
    }
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1)
    {
        temp=temp->next;
        cnt++;
    }
    //inserting at last poisiton
    {
        if(temp->next==NULL)
        {
            insertAtTail(tail,head,d);
            return;
        }
    }

    //creating a node
    Node* nodeToInsert=new Node(d);
    nodeToInsert->next=temp->next;
    temp->next=nodeToInsert;
}
void deleteNode(Node* &head,int position)
{
    //deleting first or start node
    if(position==1)
    {
        Node* temp=head;
        head=head->next;
        //memory free
        temp->next=NULL;
        delete temp;
    }
    else
    {
        //deleting any middle node or last node
        Node* current=head;
        Node* previous=NULL;
        int cnt=1;
        while(cnt<position)
        {
            previous=current;
            current=current->next;
            cnt++;
        }
        previous->next=current->next;
        
        current->next=NULL;
        //memory free
        delete current;       

    }
}

void print(Node* &head)
{
    Node* start=head;
    while(start!=NULL)
    {
        cout<< start-> data<<" ";
        start=start->next;
    }
    cout<<endl;
}
int main()
{
    // new node created
    //Node* node1=new Node(10);
    //cout<<node1 -> data<<endl;
    //cout<<node1 -> next<<endl;

    //head pointed to node1
    Node* head=NULL;

    //tail pointed to node1
    Node* tail=NULL;

    print(head);

    insertAtHead(head,tail,12);
    
    //insertAtTail(tail,head,12);

    print(head);

    insertAtHead(head,tail,15);
    
    //insertAtTail(tail,head,15);

    print(head);

    insertAtPosition(tail,head,4,22);
    print(head);

    //deleteNode(head,3);

    //print(head);

  
}
